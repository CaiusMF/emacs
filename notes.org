* Learning Emacs

** Key meanings

C = Ctrl key
M = Meta key (Alt, Option keys)
s = Super key (linux, windows, command keys)
S = Shift key

** Key bindings

*** Movement

C-p   = prev line
C-n   = next line
C-b   = prev character
C-f   = next character
M-f   = forward word
M-b   = backward word
M->   = end of buffer
M-<   = begining of buffer
M-{   = previous paragraph (prev element ~org~)
M-}   = next paragrapgh (next element ~org~)
C-v   = scroll up
M-v   = scroll down
M-m   = back to indentation
C-M-p = backward out of one level of parantheses
C-M-n = forward across one group of parantheses

*** Buffers

C-x right = next buffer
C-x left  = prev buffer
M-,       = prev buffer
M-.       = next buffer
M-/       = next window
C-x o     = next window
C-x C-s   = save buffer
C-x x r   = rename-buffer
C-x k     = kill buffer (specify)
s-k       = kill current buffer
C-M-j     = counsel switch buffer (custom map)

*** Text manipulation

C-k           = cut/kill line
C-S-backspace = kill current line
C-w           = cut/kill region
C-y           = paste/yank
C-/           = undo
C-?           = redo
M-w           = copy/save to kill ring
M-y           = cycle kill ring
M-h           = mark whole paragraph
C-M-h         = mark whole function (~python~)
C-x h         = mark whole buffer

*** Search

C-s   = forward search
C-r   = reverse search
M-s . = search symbol under cursor

*** Help

C-h ? = help menu
C-h v = describe variable (prompt list)
C-h f = describe function (prompt list)
C-h o = describe symbol (best of both worlds) (prompt list)
      * if called with cursor on var/func/symbol, will default to it
C-h b = describe bindings
C-h k = describe key (prompt)

*** Other

C-x C-e         = eval last expression
M-x eval-buffer = eval whole buffer
M-x M-x         = eval region (requires counsel)

*** Dired

C-x d   = to enter dired mode
C-x C-j = jump to dired buffer corresponding to current buff
C-o     = display file/folder in other window (~no focus~)
o       = visit file/folder in other window (~focus~)
h       = for help (describe-mode)
j       = for jumping to file

dired-jump


* Cool themes

 + dark:
   - gruvbox
   - dracula
   - material
   - palenight
   - peacock
   - snazzy
 + light:
   - acario-light
   - solarized-light
   - tsdh-light

* Info

 + doing 'eval-buffer' on config code multiple times can multiply hooks

 + text selection: instead of 'S-C-a' or 'S-C-e' selection, combine 'C-SPC' with
   'C-a' or 'C-e'

 + M-o in counsel-M-x = manipulate selected function

 + 'list-packages' refreshes the package repos (useful if 'use-package'
   doesn't find a package)

 + projectile only sees folders as projects if they are repos (git, mercurial, etc)
   or marked 

 + 'counsel-projectile-rg' = search the current project with rg

   - C-c C-o = puts the search into a new buffer which is persistent and
       can be browsed (helpful for finding things in a project)

 + counsel-esh-history = search eshell command history

 + 'xyz-mode-map' = keymap for some mode/functionality

* TODO

 - [X] find select whole line from whatever current position in said line

   + solved with macros (combine C-e C-SPACE C-a)

 - [ ] C-TAB as switch-buffer ?

 - [X] how to rename current buffer

   + C-x x r 

 - [-] python color inconsistencies (doom-themes?)

   + tree-sitter

 - [ ] terminal spawn/kill shortcut

 - [ ] see 'general' package for cleaner key binding definitions

   + see System Crafters' Emacs From Scratch #3

   + can add other prefixes like 'C-SPACE'

 - [ ] check 'auto-fill-mode' for txt files

 - [ ] need: scroll to not move cursor?

 - [ ] read on/experiment with multiple cursors

   + [ ] multiple cursors

   + [ ] phi-search

 - [ ] new forms of selection for words and whole functions

 - [X] undo/redo

   + C-/ / C-? 

 - [ ] see end of 'Emacs From Scratch #5 - Org Mode Basics' for:

   + text wrapping

   + visual fill mode (center text on screen)

   + different font sizes for different text types (headers, text, lists, etc)

 - [ ] add friends and family birthdays in org mode agenda (on repeat)

 - [ ] find way to jump back to where you previously were in a buffer

 - [ ] search symbol (M-s .) and mark them (multiple lines)

 - [X] C-SPC select from end-of-line to start-of-first-word not start-of-line

   + C-SPC + M-m 

 - [ ] multiple cursors - don't ask for action permission for all cursors as default

 - [ ] define function 'kill-buffer-other-window'

 - [ ] check out helm
